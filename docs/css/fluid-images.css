.fluid-image {
  display: block;
  position: relative;
  overflow: hidden; }
  .fluid-image__ratio {
    display: block;
    width: 100%;
    visibility: hidden; }
  .fluid-image__bg {
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 1;
    background: transparent no-repeat center center;
    background-size: cover;
    opacity: .4;
    -webkit-filter: blur(5px) !important;
    -ms-filter: blur(5px) !important;
    -moz-filter: blur(5px) !important;
    filter: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'><filter id='blur'><feGaussianBlur stdDeviation='5' /></filter></svg>#blur");
    filter: progid:DXImageTransform.Microsoft.Blur(PixelRadius='5');
    -moz-transform: scale(1.2);
    -o-transform: scale(1.2);
    -ms-transform: scale(1.2);
    -webkit-transform: scale(1.2);
    transform: scale(1.2); }
  .fluid-image__img {
    display: block;
    margin: auto;
    max-width: 100%;
    max-height: 100%;
    position: absolute;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
    left: 0;
    right: 0;
    z-index: 2; }

/*# sourceMappingURL=data:application/json;base64, */
